from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from random import choice, randint

# ü§ñ –°–ø–∏—Å–æ–∫ —Å–º–µ—à–Ω—ã—Ö —Ñ—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç (–ø–æ –∫–æ–º–∞–Ω–¥–µ "–®—É—Ç–∫–∞")
jokes = [
    "–ö–æ–ª–æ–±–æ–∫ –ø–æ–≤–µ—Å–∏–ª—Å—è üòÇ", "–†—É—Å–∞–ª–∫–∞ —Å–µ–ª–∞ –Ω–∞ —à–ø–∞–≥–∞—Ç üßú‚Äç‚ôÄÔ∏è", "–†—ã–±–∞ —É—Ç–æ–Ω—É–ª–∞ üêü",
    "–ì—Ä–∞–±–∏—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª –∫–æ—à–µ–ª—ë–∫, –∫–æ–≥–¥–∞ —É–∑–Ω–∞–ª –±–∞–ª–∞–Ω—Å üí∏", "–°–ª–æ–Ω —Å–µ–ª –Ω–∞ Wi-Fi üêòüì∂",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ—à—ë–ª –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ ‚Äî —Å–¥–µ–ª–∞–ª rollback ü´£", "–í –Ω–æ—Å–∫–∞—Ö –¥—ã—Ä–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòÖ",
    "–ö–æ–≥–¥–∞ —É–ø–∞–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Äî —è —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ–ª —Å–≤–æ—é —Å–µ–º—å—é üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "–Ø –Ω–µ –ª–µ–Ω–∏–≤–∞—è, —è –≤ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–µ–º —Ä–µ–∂–∏–º–µ üîã",
    "–ü–æ—á–µ–º—É –∫–æ—Ñ–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –º–æ–ª—á–∏—Ç... ‚òïüò∂"
]

# üñº –°–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ ‚Äî –∫–∞–∂–¥—ã–π –º–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–¥–ø–∏—Å—å
memes = [
    {"image": "https://i.imgur.com/OuKDd6T.jpeg", "caption": "–ö–æ–≥–¥–∞ –û–õ–ï–ì —à—É—Ç–∏—Ç üòπ"},
    {"image": "https://i.imgur.com/Zb1rkuF.jpeg", "caption": "–ö–æ–≥–¥–∞ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ —Å 1 —Ä–∞–∑–∞ üéØ"},
    {"image": "https://i.imgur.com/YlHbNZx.jpeg", "caption": "–û—Ç–≤–µ—Ç –Ω–∞ '–∫–∞–∫ –¥–µ–ª–∞' ü§†"},
    {"image": "https://i.imgur.com/u7nGlNd.jpeg", "caption": "–¢–∏–ø–∏—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ –û–õ–ï–ì ü§ñ"},
    {"image": "https://i.imgur.com/R6KdZ1p.jpeg", "caption": "–ö–æ–≥–¥–∞ –±–æ—Ç –≤ –æ—Ç–ø—É—Å–∫–µ üèñÔ∏è"}
]

# üé¨ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã ‚Äî –ø–æ –∂–∞–Ω—Ä–∞–º: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
movies = {
    "–±–æ–µ–≤–∏–∫": [  # –∂–∞–Ω—Ä "–±–æ–µ–≤–∏–∫"
        {"title": "–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä 2", "desc": "–ö–ª–∞—Å—Å–∏–∫–∞ –∂–∞–Ω—Ä–∞ üí•", "img": "https://i.imgur.com/2D2fO8U.jpeg"},
        {"title": "–î–∂–æ–Ω –£–∏–∫", "desc": "–ú–µ—Å—Ç—å, —Å—Ç–∏–ª—å –∏ —Å–æ–±–∞–∫–∞ üêï", "img": "https://i.imgur.com/mjHoUBo.jpeg"}
    ],
    "–∫–æ–º–µ–¥–∏—è": [  # –∂–∞–Ω—Ä "–∫–æ–º–µ–¥–∏—è"
        {"title": "–û–¥–∏–Ω –¥–æ–º–∞", "desc": "–ö–µ–≤–∏–Ω –æ–ø—è—Ç—å –∑–∞–±—ã–ª —Ä–æ–¥–∏—Ç–µ–ª–µ–π üòÇ", "img": "https://i.imgur.com/Xcc0GIM.jpeg"},
        {"title": "–ú–∞—Å–∫–∞", "desc": "–°–º–µ—Ö, –∑–µ–ª—ë–Ω–æ–µ –ª–∏—Ü–æ –∏ –î–∂–∏–º –ö–µ—Ä—Ä–∏ üü¢", "img": "https://i.imgur.com/y10iBGP.jpeg"}
    ],
    "—É–∂–∞—Å—ã": [  # –∂–∞–Ω—Ä "—É–∂–∞—Å—ã"
        {"title": "–ü–∏–ª–∞", "desc": "–ò–≥—Ä–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ ü™ö", "img": "https://i.imgur.com/0u3pHzC.jpeg"},
        {"title": "–ê—Å—Ç—Ä–∞–ª", "desc": "–ö–æ–≥–¥–∞ –¥–æ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä–∏–ø–∏—Ç üëª", "img": "https://i.imgur.com/j5Ub6Pq.jpeg"}
    ]
}

# ‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
quiz = [
    {"question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 3 + 5?", "options": ["6", "8", "10"], "correct": "8"},
    {"question": "–ö–∞–∫–æ–π —è–∑—ã–∫ —É –±–æ—Ç–∞ –û–õ–ï–ì?", "options": ["C++", "Python", "HTML"], "correct": "Python"},
    {"question": "–ö—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π —Ñ–∏–ª—å–º–∞ '–ú–∞—Ç—Ä–∏—Ü–∞'?", "options": ["–ù–µ–æ", "–ú–æ—Ä—Ñ–µ—É—Å", "–¢—Ä–∏–Ω–∏—Ç–∏"], "correct": "–ù–µ–æ"}
]

# üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
responses = {
    "–ø—Ä–∏–≤–µ—Ç": ["–ó–¥–∞—Ä–æ–≤–∞! üòé", "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üëã", "–•—ç–π, –∫–∞–∫ –∂–∏–∑–Ω—å? üß¢"],
    "–∫–∞–∫ –¥–µ–ª–∞": ["–ö–∞–∫ –æ–≥—É—Ä–µ—Ü! ü•í", "–í—Å—ë –ø—É—á–∫–æ–º üåà", "–ù–æ—Ä–º–∞–ª—å–Ω–æ, –∞ —É —Ç–µ–±—è?"],
    "—á—Ç–æ –¥–µ–ª–∞–µ—à—å": ["–î–∞ –Ω–∏—á–µ, –±–∞–π—Ç—ã –≥–æ–Ω—è—é üì°", "–°–∏–∂—É –≤ —á–∞—Ç–∞—Ö –∫–∞–∫ –æ–±—ã—á–Ω–æ ü§ñ", "–†–∞–±–æ—Ç–∞—é –±–æ—Ç–æ–º 24/7 üòÖ"]
}

# ‚å®Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
main_menu = ReplyKeyboardMarkup([
    [KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç"), KeyboardButton("üòÇ –®—É—Ç–∫–∞")],
    [KeyboardButton("üé¨ –§–∏–ª—å–º"), KeyboardButton("üéÆ –ò–≥—Ä–∞")],
    [KeyboardButton("üìä –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), KeyboardButton("üì∑ –ú–µ–º")],
    [KeyboardButton("ü§î –ö–∞–∫ –¥–µ–ª–∞?"), KeyboardButton("üôã –ß—Ç–æ –¥–µ–ª–∞–µ—à—å?")],
    [KeyboardButton("üëã –ü–æ–∫–∞")]
], resize_keyboard=True)

# üëã –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ —Å—á—ë—Ç—á–∏–∫ –ø–æ–±–µ–¥ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    context.user_data.setdefault("wins", 0)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –û–õ–ï–ì ü§ñ –ñ–º–∏ –∫–Ω–æ–ø–∫–∏, –≤–µ—Å–µ–ª–∏—Å—å!", reply_markup=main_menu)

# üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫-–æ—Ç–≤–µ—Ç–æ–≤
async def send_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = choice(quiz)  # —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
    # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ ‚Äî –∫–∞–∂–¥–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç callback_data —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    buttons = [InlineKeyboardButton(opt, callback_data=f"answer|{q['correct']}|{opt}") for opt in q["options"]]
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(q["question"], reply_markup=InlineKeyboardMarkup.from_column(buttons))

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
async def check_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query  # –æ–±—ä–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è
    await query.answer()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    _, correct, selected = query.data.split("|")  # —Ä–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if selected == correct:
        await query.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!")
    else:
        await query.edit_message_text(f"‚ùå –ù–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")

# üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é
    if "–ø—Ä–∏–≤–µ—Ç" in text:
        await update.message.reply_text(choice(responses["–ø—Ä–∏–≤–µ—Ç"]))
    elif "–∫–∞–∫ –¥–µ–ª–∞" in text:
        await update.message.reply_text(choice(responses["–∫–∞–∫ –¥–µ–ª–∞"]))
    elif "—á—Ç–æ –¥–µ–ª–∞–µ—à—å" in text:
        await update.message.reply_text(choice(responses["—á—Ç–æ –¥–µ–ª–∞–µ—à—å"]))
    elif "—à—É—Ç–∫–∞" in text:
        await update.message.reply_text(choice(jokes))
    elif "–º–µ–º" in text:
        meme = choice(memes)
        await update.message.reply_photo(photo=meme["image"], caption=meme["caption"])
    elif "—Ñ–∏–ª—å–º" in text:
        genre = choice(list(movies.keys()))  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä
        movie = choice(movies[genre])  # —Ñ–∏–ª—å–º –∏–∑ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞
        msg = f"üé¨ <b>{movie['title']}</b>\n{movie['desc']}"
        await update.message.reply_photo(photo=movie["img"], caption=msg, parse_mode="HTML")
    elif "–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞" in text:
        await send_quiz(update, context)
    elif "–∏–≥—Ä–∞" in text:
        # –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏-–∏–≥—Ä—ã "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
        context.user_data["guess"] = randint(1, 100)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        context.user_data["tries"] = 5  # –¥–∞—ë–º 5 –ø–æ–ø—ã—Ç–æ–∫
        await update.message.reply_text("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 üéØ (—É —Ç–µ–±—è 5 –ø–æ–ø—ã—Ç–æ–∫)")
    elif "guess" in context.user_data:
        # –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∏–≥—Ä–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ
        try:
            num = int(text)
        except:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ üßÆ")
            return

        context.user_data["tries"] -= 1  # —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        answer = context.user_data["guess"]

        if num == answer:
            context.user_data["wins"] += 1
            await update.message.reply_text(f"‚úÖ –£–≥–∞–¥–∞–ª! –ü–æ–±–µ–¥: {context.user_data['wins']}")
            context.user_data.pop("guess")
        elif context.user_data["tries"] == 0:
            await update.message.reply_text(f"‚ùå –ù–µ —É–≥–∞–¥–∞–ª. –ë—ã–ª–æ —á–∏—Å–ª–æ: {answer}")
            context.user_data.pop("guess")
        else:
            hint = "–º–µ–Ω—å—à–µ" if num > answer else "–±–æ–ª—å—à–µ"
            await update.message.reply_text(f"–ß–∏—Å–ª–æ {hint}. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {context.user_data['tries']}")
    elif "–ø–æ–∫–∞" in text:
        await update.message.reply_text("–ü–æ–∫–∞! üëã", reply_markup=main_menu)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è üßê –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è")

# ‚ñ∂Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
def run_bot():
    app = Application.builder().token("–í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù").build()  # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))  # /start
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    app.add_handler(CallbackQueryHandler(check_quiz))  # –Ω–∞–∂–∞—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()  # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)

# ‚¨áÔ∏è –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
run_bot()
